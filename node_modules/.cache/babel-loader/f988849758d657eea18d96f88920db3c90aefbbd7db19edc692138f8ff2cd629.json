{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccountInstruction(account, mint, owner) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(initializeAccountInstructionData.span);\n  initializeAccountInstructionData.encode({\n    instruction: TokenInstruction.InitializeAccount\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data\n  } = decodeInitializeAccountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeAccount) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner || !rent) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, owner, rent],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data: initializeAccountInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeAccountInstructionData","createInitializeAccountInstruction","account","mint","owner","programId","arguments","length","undefined","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeAccount","decodeInitializeAccountInstruction","equals","rent","decodeInitializeAccountInstructionUnchecked","_ref","decode"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\instructions\\initializeAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeAccountInstructionData {\n    instruction: TokenInstruction.InitializeAccount;\n}\n\n/** TODO: docs */\nexport const initializeAccountInstructionData = struct<InitializeAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(initializeAccountInstructionData.span);\n    initializeAccountInstructionData.encode({ instruction: TokenInstruction.InitializeAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeAccount instruction */\nexport interface DecodedInitializeAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeAccount;\n    };\n}\n\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, rent },\n        data,\n    } = decodeInitializeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeAccount instruction */\nexport interface DecodedInitializeAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data: initializeAccountInstructionData.decode(data),\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}