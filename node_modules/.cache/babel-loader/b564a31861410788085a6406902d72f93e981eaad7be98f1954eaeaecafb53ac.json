{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createSetAuthorityInstruction } from '../instructions/setAuthority.js';\nimport { getSigners } from './internal.js';\n/**\n * Assign a new authority to the account\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param account          Address of the account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function setAuthority(connection, payer, account, currentAuthority, authorityType, newAuthority) {\n  let multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  let confirmOptions = arguments.length > 7 ? arguments[7] : undefined;\n  let programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : TOKEN_PROGRAM_ID;\n  const [currentAuthorityPublicKey, signers] = getSigners(currentAuthority, multiSigners);\n  const transaction = new Transaction().add(createSetAuthorityInstruction(account, currentAuthorityPublicKey, authorityType, newAuthority, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createSetAuthorityInstruction","getSigners","setAuthority","connection","payer","account","currentAuthority","authorityType","newAuthority","multiSigners","arguments","length","undefined","confirmOptions","programId","currentAuthorityPublicKey","signers","transaction","add"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-finalmain\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\setAuthority.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport type { AuthorityType } from '../instructions/setAuthority.js';\nimport { createSetAuthorityInstruction } from '../instructions/setAuthority.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Assign a new authority to the account\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param account          Address of the account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function setAuthority(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    currentAuthority: Signer | PublicKey,\n    authorityType: AuthorityType,\n    newAuthority: PublicKey | null,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [currentAuthorityPublicKey, signers] = getSigners(currentAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createSetAuthorityInstruction(\n            account,\n            currentAuthorityPublicKey,\n            authorityType,\n            newAuthority,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAElD,SAASC,6BAA6B,QAAQ,iCAAiC;AAC/E,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;;AAeA,OAAO,eAAeC,YAAYA,CAC9BC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,gBAAoC,EACpCC,aAA4B,EAC5BC,YAA8B,EAGF;EAAA,IAF5BC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyB,EAAE;EAAA,IAC3BG,cAA+B,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAC/BE,SAAS,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGX,gBAAgB;EAE5B,MAAM,CAACgB,yBAAyB,EAAEC,OAAO,CAAC,GAAGf,UAAU,CAACK,gBAAgB,EAAEG,YAAY,CAAC;EAEvF,MAAMQ,WAAW,GAAG,IAAInB,WAAW,EAAE,CAACoB,GAAG,CACrClB,6BAA6B,CACzBK,OAAO,EACPU,yBAAyB,EACzBR,aAAa,EACbC,YAAY,EACZC,YAAY,EACZK,SAAS,CACZ,CACJ;EAED,OAAO,MAAMjB,yBAAyB,CAACM,UAAU,EAAEc,WAAW,EAAE,CAACb,KAAK,EAAE,GAAGY,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG"},"metadata":{},"sourceType":"module","externalDependencies":[]}