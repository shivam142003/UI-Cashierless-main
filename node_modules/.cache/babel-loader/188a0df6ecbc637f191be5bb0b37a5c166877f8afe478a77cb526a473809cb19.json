{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { createCreateNativeMintInstruction } from '../instructions/createNativeMint.js';\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\nexport async function createNativeMint(connection, payer, confirmOptions) {\n  let nativeMint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NATIVE_MINT_2022;\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_2022_PROGRAM_ID;\n  const transaction = new Transaction().add(createCreateNativeMintInstruction(payer.publicKey, nativeMint, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","NATIVE_MINT_2022","TOKEN_2022_PROGRAM_ID","createCreateNativeMintInstruction","createNativeMint","connection","payer","confirmOptions","nativeMint","arguments","length","undefined","programId","transaction","add","publicKey"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\createNativeMint.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { createCreateNativeMintInstruction } from '../instructions/createNativeMint.js';\n\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\nexport async function createNativeMint(\n    connection: Connection,\n    payer: Signer,\n    confirmOptions?: ConfirmOptions,\n    nativeMint = NATIVE_MINT_2022,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<void> {\n    const transaction = new Transaction().add(\n        createCreateNativeMintInstruction(payer.publicKey, nativeMint, programId)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,EAAEC,qBAAqB,QAAQ,iBAAiB;AACzE,SAASC,iCAAiC,QAAQ,qCAAqC;AAEvF;;;;;;;;;AASA,OAAO,eAAeC,gBAAgBA,CAClCC,UAAsB,EACtBC,KAAa,EACbC,cAA+B,EAEE;EAAA,IADjCC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,gBAAgB;EAAA,IAC7BW,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,qBAAqB;EAEjC,MAAMW,WAAW,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CACrCX,iCAAiC,CAACG,KAAK,CAACS,SAAS,EAAEP,UAAU,EAAEI,SAAS,CAAC,CAC5E;EACD,MAAMb,yBAAyB,CAACM,UAAU,EAAEQ,WAAW,EAAE,CAACP,KAAK,CAAC,EAAEC,cAAc,CAAC;AACrF"},"metadata":{},"sourceType":"module","externalDependencies":[]}