{"ast":null,"code":"import { blob, struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUiAmountToAmountInstruction(mint, amount) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  const buf = Buffer.from(amount, 'utf8');\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(buf.length, 'amount')]);\n  const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n  uiAmountToAmountInstructionData.encode({\n    instruction: TokenInstruction.UiAmountToAmount,\n    amount: buf\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeUiAmountToAmountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(instruction.data.length - 1, 'amount')]);\n  if (instruction.data.length !== uiAmountToAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.UiAmountToAmount) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeUiAmountToAmountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint],\n    data\n  } = _ref;\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(data.length - 1, 'amount')]);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: uiAmountToAmountInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["blob","struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","createUiAmountToAmountInstruction","mint","amount","programId","arguments","length","undefined","keys","pubkey","isSigner","isWritable","buf","Buffer","from","uiAmountToAmountInstructionData","data","alloc","span","encode","instruction","UiAmountToAmount","decodeUiAmountToAmountInstruction","equals","decodeUiAmountToAmountInstructionUnchecked","_ref","decode"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-finalmain\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\instructions\\uiAmountToAmount.ts"],"sourcesContent":["import { blob, struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface UiAmountToAmountInstructionData {\n    instruction: TokenInstruction.UiAmountToAmount;\n    amount: Uint8Array;\n}\n\n/** TODO: docs */\n\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUiAmountToAmountInstruction(\n    mint: PublicKey,\n    amount: string,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n    const buf = Buffer.from(amount, 'utf8');\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(buf.length, 'amount'),\n    ]);\n\n    const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n    uiAmountToAmountInstructionData.encode(\n        {\n            instruction: TokenInstruction.UiAmountToAmount,\n            amount: buf,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid UiAmountToAmount instruction */\nexport interface DecodedUiAmountToAmountInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.UiAmountToAmount;\n        amount: Uint8Array;\n    };\n}\n\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeUiAmountToAmountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedUiAmountToAmountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(instruction.data.length - 1, 'amount'),\n    ]);\n    if (instruction.data.length !== uiAmountToAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.UiAmountToAmount) throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated UiAmountToAmount instruction */\nexport interface DecodedUiAmountToAmountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        amount: Uint8Array;\n    };\n}\n\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeUiAmountToAmountInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedUiAmountToAmountInstructionUnchecked {\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(data.length - 1, 'amount'),\n    ]);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: uiAmountToAmountInstructionData.decode(data),\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}