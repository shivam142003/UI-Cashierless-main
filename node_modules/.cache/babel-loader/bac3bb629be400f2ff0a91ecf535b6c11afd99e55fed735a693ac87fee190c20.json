{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeMintInstruction } from '../../instructions/initializeMint.js';\nimport { ExtensionType, getMintLen } from '../extensionType.js';\nimport { createInitializeInterestBearingMintInstruction, createUpdateRateInterestBearingMintInstruction } from './instructions.js';\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport async function createInterestBearingMint(connection, payer, mintAuthority, freezeAuthority, rateAuthority, rate, decimals) {\n  let keypair = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : Keypair.generate();\n  let confirmOptions = arguments.length > 8 ? arguments[8] : undefined;\n  let programId = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : TOKEN_2022_PROGRAM_ID;\n  const mintLen = getMintLen([ExtensionType.InterestBearingConfig]);\n  const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: mintLen,\n    lamports,\n    programId\n  }), createInitializeInterestBearingMintInstruction(keypair.publicKey, rateAuthority, rate, programId), createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateRateInterestBearingMint(connection, payer, mint, rateAuthority, rate) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_2022_PROGRAM_ID;\n  const [rateAuthorityPublicKey, signers] = getSigners(rateAuthority, multiSigners);\n  const transaction = new Transaction().add(createUpdateRateInterestBearingMintInstruction(mint, rateAuthorityPublicKey, rate, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\n}","map":{"version":3,"names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createInitializeMintInstruction","ExtensionType","getMintLen","createInitializeInterestBearingMintInstruction","createUpdateRateInterestBearingMintInstruction","createInterestBearingMint","connection","payer","mintAuthority","freezeAuthority","rateAuthority","rate","decimals","keypair","arguments","length","undefined","generate","confirmOptions","programId","mintLen","InterestBearingConfig","lamports","getMinimumBalanceForRentExemption","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space","updateRateInterestBearingMint","mint","multiSigners","rateAuthorityPublicKey","signers"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-finalmain\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\extensions\\interestBearingMint\\actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeMintInstruction } from '../../instructions/initializeMint.js';\nimport { ExtensionType, getMintLen } from '../extensionType.js';\nimport {\n    createInitializeInterestBearingMintInstruction,\n    createUpdateRateInterestBearingMintInstruction,\n} from './instructions.js';\n\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport async function createInterestBearingMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey,\n    rateAuthority: PublicKey,\n    rate: number,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<PublicKey> {\n    const mintLen = getMintLen([ExtensionType.InterestBearingConfig]);\n    const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: mintLen,\n            lamports,\n            programId,\n        }),\n        createInitializeInterestBearingMintInstruction(keypair.publicKey, rateAuthority, rate, programId),\n        createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n}\n\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateRateInterestBearingMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    rateAuthority: Signer,\n    rate: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<string> {\n    const [rateAuthorityPublicKey, signers] = getSigners(rateAuthority, multiSigners);\n    const transaction = new Transaction().add(\n        createUpdateRateInterestBearingMintInstruction(mint, rateAuthorityPublicKey, rate, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\n}\n"],"mappings":"AACA,SAASA,OAAO,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAChG,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,+BAA+B,QAAQ,sCAAsC;AACtF,SAASC,aAAa,EAAEC,UAAU,QAAQ,qBAAqB;AAC/D,SACIC,8CAA8C,EAC9CC,8CAA8C,QAC3C,mBAAmB;AAE1B;;;;;;;;;;;;;;;;AAgBA,OAAO,eAAeC,yBAAyBA,CAC3CC,UAAsB,EACtBC,KAAa,EACbC,aAAwB,EACxBC,eAA0B,EAC1BC,aAAwB,EACxBC,IAAY,EACZC,QAAgB,EAGiB;EAAA,IAFjCC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGpB,OAAO,CAACuB,QAAQ,EAAE;EAAA,IAC5BC,cAA+B,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAC/BG,SAAS,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGf,qBAAqB;EAEjC,MAAMqB,OAAO,GAAGlB,UAAU,CAAC,CAACD,aAAa,CAACoB,qBAAqB,CAAC,CAAC;EACjE,MAAMC,QAAQ,GAAG,MAAMhB,UAAU,CAACiB,iCAAiC,CAACH,OAAO,CAAC;EAC5E,MAAMI,WAAW,GAAG,IAAI3B,WAAW,EAAE,CAAC4B,GAAG,CACrC7B,aAAa,CAAC8B,aAAa,CAAC;IACxBC,UAAU,EAAEpB,KAAK,CAACqB,SAAS;IAC3BC,gBAAgB,EAAEhB,OAAO,CAACe,SAAS;IACnCE,KAAK,EAAEV,OAAO;IACdE,QAAQ;IACRH;GACH,CAAC,EACFhB,8CAA8C,CAACU,OAAO,CAACe,SAAS,EAAElB,aAAa,EAAEC,IAAI,EAAEQ,SAAS,CAAC,EACjGnB,+BAA+B,CAACa,OAAO,CAACe,SAAS,EAAEhB,QAAQ,EAAEJ,aAAa,EAAEC,eAAe,EAAEU,SAAS,CAAC,CAC1G;EACD,MAAMxB,yBAAyB,CAACW,UAAU,EAAEkB,WAAW,EAAE,CAACjB,KAAK,EAAEM,OAAO,CAAC,EAAEK,cAAc,CAAC;EAC1F,OAAOL,OAAO,CAACe,SAAS;AAC5B;AAEA;;;;;;;;;;;;;;AAcA,OAAO,eAAeG,6BAA6BA,CAC/CzB,UAAsB,EACtBC,KAAa,EACbyB,IAAe,EACftB,aAAqB,EACrBC,IAAY,EAGqB;EAAA,IAFjCsB,YAAA,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyB,EAAE;EAAA,IAC3BI,cAA+B,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAC/BG,SAAS,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGf,qBAAqB;EAEjC,MAAM,CAACmC,sBAAsB,EAAEC,OAAO,CAAC,GAAGrC,UAAU,CAACY,aAAa,EAAEuB,YAAY,CAAC;EACjF,MAAMT,WAAW,GAAG,IAAI3B,WAAW,EAAE,CAAC4B,GAAG,CACrCrB,8CAA8C,CAAC4B,IAAI,EAAEE,sBAAsB,EAAEvB,IAAI,EAAEwB,OAAO,EAAEhB,SAAS,CAAC,CACzG;EAED,OAAO,MAAMxB,yBAAyB,CAACW,UAAU,EAAEkB,WAAW,EAAE,CAACjB,KAAK,EAAEG,aAAa,EAAE,GAAGyB,OAAO,CAAC,EAAEjB,cAAc,CAAC;AACvH"},"metadata":{},"sourceType":"module","externalDependencies":[]}