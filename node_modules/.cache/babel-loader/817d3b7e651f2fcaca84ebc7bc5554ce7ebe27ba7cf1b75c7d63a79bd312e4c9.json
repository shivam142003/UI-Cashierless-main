{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var CpiGuardInstruction;\n(function (CpiGuardInstruction) {\n  CpiGuardInstruction[CpiGuardInstruction[\"Enable\"] = 0] = \"Enable\";\n  CpiGuardInstruction[CpiGuardInstruction[\"Disable\"] = 1] = \"Disable\";\n})(CpiGuardInstruction || (CpiGuardInstruction = {}));\n/** TODO: docs */\nexport const cpiGuardInstructionData = struct([u8('instruction'), u8('cpiGuardInstruction')]);\n/**\n * Construct an EnableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableCpiGuardInstruction(account, authority) {\n  let multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_2022_PROGRAM_ID;\n  return createCpiGuardInstruction(CpiGuardInstruction.Enable, account, authority, multiSigners, programId);\n}\n/**\n * Construct a DisableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableCpiGuardInstruction(account, authority) {\n  let multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_2022_PROGRAM_ID;\n  return createCpiGuardInstruction(CpiGuardInstruction.Disable, account, authority, multiSigners, programId);\n}\nfunction createCpiGuardInstruction(cpiGuardInstruction, account, authority, multiSigners, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(cpiGuardInstructionData.span);\n  cpiGuardInstructionData.encode({\n    instruction: TokenInstruction.CpiGuardExtension,\n    cpiGuardInstruction\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","programSupportsExtensions","TOKEN_2022_PROGRAM_ID","TokenUnsupportedInstructionError","addSigners","TokenInstruction","CpiGuardInstruction","cpiGuardInstructionData","createEnableCpiGuardInstruction","account","authority","multiSigners","arguments","length","undefined","programId","createCpiGuardInstruction","Enable","createDisableCpiGuardInstruction","Disable","cpiGuardInstruction","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","CpiGuardExtension"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\extensions\\cpiGuard\\instructions.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\n\nexport enum CpiGuardInstruction {\n    Enable = 0,\n    Disable = 1,\n}\n\n/** TODO: docs */\nexport interface CpiGuardInstructionData {\n    instruction: TokenInstruction.CpiGuardExtension;\n    cpiGuardInstruction: CpiGuardInstruction;\n}\n\n/** TODO: docs */\nexport const cpiGuardInstructionData = struct<CpiGuardInstructionData>([u8('instruction'), u8('cpiGuardInstruction')]);\n\n/**\n * Construct an EnableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableCpiGuardInstruction(\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    return createCpiGuardInstruction(CpiGuardInstruction.Enable, account, authority, multiSigners, programId);\n}\n\n/**\n * Construct a DisableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableCpiGuardInstruction(\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    return createCpiGuardInstruction(CpiGuardInstruction.Disable, account, authority, multiSigners, programId);\n}\n\nfunction createCpiGuardInstruction(\n    cpiGuardInstruction: CpiGuardInstruction,\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[],\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], authority, multiSigners);\n\n    const data = Buffer.alloc(cpiGuardInstructionData.span);\n    cpiGuardInstructionData.encode(\n        {\n            instruction: TokenInstruction.CpiGuardExtension,\n            cpiGuardInstruction,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,yBAAyB,EAAEC,qBAAqB,QAAQ,oBAAoB;AACrF,SAASC,gCAAgC,QAAQ,iBAAiB;AAClE,SAASC,UAAU,QAAQ,gCAAgC;AAC3D,SAASC,gBAAgB,QAAQ,6BAA6B;AAE9D,WAAYC,mBAGX;AAHD,WAAYA,mBAAmB;EAC3BA,mBAAA,CAAAA,mBAAA,0BAAU;EACVA,mBAAA,CAAAA,mBAAA,4BAAW;AACf,CAAC,EAHWA,mBAAmB,KAAnBA,mBAAmB;AAW/B;AACA,OAAO,MAAMC,uBAAuB,GAAGT,MAAM,CAA0B,CAACC,EAAE,CAAC,aAAa,CAAC,EAAEA,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAEtH;;;;;;;;;;AAUA,OAAM,SAAUS,+BAA+BA,CAC3CC,OAAkB,EAClBC,SAAoB,EAEa;EAAA,IADjCC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;EAAA,IACzCG,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,qBAAqB;EAEjC,OAAOc,yBAAyB,CAACV,mBAAmB,CAACW,MAAM,EAAER,OAAO,EAAEC,SAAS,EAAEC,YAAY,EAAEI,SAAS,CAAC;AAC7G;AAEA;;;;;;;;;;AAUA,OAAM,SAAUG,gCAAgCA,CAC5CT,OAAkB,EAClBC,SAAoB,EAEa;EAAA,IADjCC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;EAAA,IACzCG,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,qBAAqB;EAEjC,OAAOc,yBAAyB,CAACV,mBAAmB,CAACa,OAAO,EAAEV,OAAO,EAAEC,SAAS,EAAEC,YAAY,EAAEI,SAAS,CAAC;AAC9G;AAEA,SAASC,yBAAyBA,CAC9BI,mBAAwC,EACxCX,OAAkB,EAClBC,SAAoB,EACpBC,YAAoC,EACpCI,SAAoB;EAEpB,IAAI,CAACd,yBAAyB,CAACc,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIZ,gCAAgC,EAAE;;EAEhD,MAAMkB,IAAI,GAAGjB,UAAU,CAAC,CAAC;IAAEkB,MAAM,EAAEb,OAAO;IAAEc,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC,EAAEd,SAAS,EAAEC,YAAY,CAAC;EAE1G,MAAMc,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACpB,uBAAuB,CAACqB,IAAI,CAAC;EACvDrB,uBAAuB,CAACsB,MAAM,CAC1B;IACIC,WAAW,EAAEzB,gBAAgB,CAAC0B,iBAAiB;IAC/CX;GACH,EACDK,IAAI,CACP;EAED,OAAO,IAAIzB,sBAAsB,CAAC;IAAEqB,IAAI;IAAEN,SAAS;IAAEU;EAAI,CAAE,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}