{"ast":null,"code":"import { PublicKey } from '@solana/web3.js';\nimport BigNumber from 'bignumber.js';\nimport { HTTPS_PROTOCOL, SOLANA_PROTOCOL } from './constants.js';\n/**\n * Thrown when a URL can't be parsed as a Solana Pay URL.\n */\nexport class ParseURLError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'ParseURLError';\n  }\n}\n/**\n * Parse a Solana Pay URL.\n *\n * @param url - URL to parse.\n *\n * @throws {ParseURLError}\n */\nexport function parseURL(url) {\n  if (typeof url === 'string') {\n    if (url.length > 2048) throw new ParseURLError('length invalid');\n    url = new URL(url);\n  }\n  if (url.protocol !== SOLANA_PROTOCOL) throw new ParseURLError('protocol invalid');\n  if (!url.pathname) throw new ParseURLError('pathname missing');\n  return /[:%]/.test(url.pathname) ? parseTransactionRequestURL(url) : parseTransferRequestURL(url);\n}\nfunction parseTransactionRequestURL(_ref) {\n  let {\n    pathname,\n    searchParams\n  } = _ref;\n  const link = new URL(decodeURIComponent(pathname));\n  if (link.protocol !== HTTPS_PROTOCOL) throw new ParseURLError('link invalid');\n  const label = searchParams.get('label') || undefined;\n  const message = searchParams.get('message') || undefined;\n  return {\n    link,\n    label,\n    message\n  };\n}\nfunction parseTransferRequestURL(_ref2) {\n  let {\n    pathname,\n    searchParams\n  } = _ref2;\n  let recipient;\n  try {\n    recipient = new PublicKey(pathname);\n  } catch (error) {\n    throw new ParseURLError('recipient invalid');\n  }\n  let amount;\n  const amountParam = searchParams.get('amount');\n  if (amountParam != null) {\n    if (!/^\\d+(\\.\\d+)?$/.test(amountParam)) throw new ParseURLError('amount invalid');\n    amount = new BigNumber(amountParam);\n    if (amount.isNaN()) throw new ParseURLError('amount NaN');\n    if (amount.isNegative()) throw new ParseURLError('amount negative');\n  }\n  let splToken;\n  const splTokenParam = searchParams.get('spl-token');\n  if (splTokenParam != null) {\n    try {\n      splToken = new PublicKey(splTokenParam);\n    } catch (error) {\n      throw new ParseURLError('spl-token invalid');\n    }\n  }\n  let reference;\n  const referenceParams = searchParams.getAll('reference');\n  if (referenceParams.length) {\n    try {\n      reference = referenceParams.map(reference => new PublicKey(reference));\n    } catch (error) {\n      throw new ParseURLError('reference invalid');\n    }\n  }\n  const label = searchParams.get('label') || undefined;\n  const message = searchParams.get('message') || undefined;\n  const memo = searchParams.get('memo') || undefined;\n  return {\n    recipient,\n    amount,\n    splToken,\n    reference,\n    label,\n    message,\n    memo\n  };\n}","map":{"version":3,"names":["PublicKey","BigNumber","HTTPS_PROTOCOL","SOLANA_PROTOCOL","ParseURLError","Error","constructor","name","parseURL","url","length","URL","protocol","pathname","test","parseTransactionRequestURL","parseTransferRequestURL","_ref","searchParams","link","decodeURIComponent","label","get","undefined","message","_ref2","recipient","error","amount","amountParam","isNaN","isNegative","splToken","splTokenParam","reference","referenceParams","getAll","map","memo"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\pay\\src\\parseURL.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport BigNumber from 'bignumber.js';\nimport { HTTPS_PROTOCOL, SOLANA_PROTOCOL } from './constants.js';\nimport type { Amount, Label, Link, Memo, Message, Recipient, Reference, SPLToken } from './types.js';\n\n/**\n * A Solana Pay transaction request URL.\n */\nexport interface TransactionRequestURL {\n    /** `link` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#link). */\n    link: Link;\n    /** `label` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#label-1). */\n    label: Label | undefined;\n    /** `message` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#message-1). */\n    message: Message | undefined;\n}\n\n/**\n * A Solana Pay transfer request URL.\n */\nexport interface TransferRequestURL {\n    /** `recipient` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#recipient). */\n    recipient: Recipient;\n    /** `amount` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#amount). */\n    amount: Amount | undefined;\n    /** `spl-token` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#spl-token). */\n    splToken: SPLToken | undefined;\n    /** `reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference). */\n    reference: Reference[] | undefined;\n    /** `label` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#label). */\n    label: Label | undefined;\n    /** `message` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#message). */\n    message: Message | undefined;\n    /** `memo` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#memo). */\n    memo: Memo | undefined;\n}\n\n/**\n * Thrown when a URL can't be parsed as a Solana Pay URL.\n */\nexport class ParseURLError extends Error {\n    name = 'ParseURLError';\n}\n\n/**\n * Parse a Solana Pay URL.\n *\n * @param url - URL to parse.\n *\n * @throws {ParseURLError}\n */\nexport function parseURL(url: string | URL): TransactionRequestURL | TransferRequestURL {\n    if (typeof url === 'string') {\n        if (url.length > 2048) throw new ParseURLError('length invalid');\n        url = new URL(url);\n    }\n\n    if (url.protocol !== SOLANA_PROTOCOL) throw new ParseURLError('protocol invalid');\n    if (!url.pathname) throw new ParseURLError('pathname missing');\n\n    return /[:%]/.test(url.pathname) ? parseTransactionRequestURL(url) : parseTransferRequestURL(url);\n}\n\nfunction parseTransactionRequestURL({ pathname, searchParams }: URL): TransactionRequestURL {\n    const link = new URL(decodeURIComponent(pathname));\n    if (link.protocol !== HTTPS_PROTOCOL) throw new ParseURLError('link invalid');\n\n    const label = searchParams.get('label') || undefined;\n    const message = searchParams.get('message') || undefined;\n\n    return {\n        link,\n        label,\n        message,\n    };\n}\n\nfunction parseTransferRequestURL({ pathname, searchParams }: URL): TransferRequestURL {\n    let recipient: PublicKey;\n    try {\n        recipient = new PublicKey(pathname);\n    } catch (error: any) {\n        throw new ParseURLError('recipient invalid');\n    }\n\n    let amount: BigNumber | undefined;\n    const amountParam = searchParams.get('amount');\n    if (amountParam != null) {\n        if (!/^\\d+(\\.\\d+)?$/.test(amountParam)) throw new ParseURLError('amount invalid');\n\n        amount = new BigNumber(amountParam);\n        if (amount.isNaN()) throw new ParseURLError('amount NaN');\n        if (amount.isNegative()) throw new ParseURLError('amount negative');\n    }\n\n    let splToken: PublicKey | undefined;\n    const splTokenParam = searchParams.get('spl-token');\n    if (splTokenParam != null) {\n        try {\n            splToken = new PublicKey(splTokenParam);\n        } catch (error) {\n            throw new ParseURLError('spl-token invalid');\n        }\n    }\n\n    let reference: PublicKey[] | undefined;\n    const referenceParams = searchParams.getAll('reference');\n    if (referenceParams.length) {\n        try {\n            reference = referenceParams.map((reference) => new PublicKey(reference));\n        } catch (error) {\n            throw new ParseURLError('reference invalid');\n        }\n    }\n\n    const label = searchParams.get('label') || undefined;\n    const message = searchParams.get('message') || undefined;\n    const memo = searchParams.get('memo') || undefined;\n\n    return {\n        recipient,\n        amount,\n        splToken,\n        reference,\n        label,\n        message,\n        memo,\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}