{"ast":null,"code":"import { struct, u16 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nexport const MAX_FEE_BASIS_POINTS = 10000;\nexport const ONE_IN_BASIS_POINTS = MAX_FEE_BASIS_POINTS;\n/** Buffer layout for de/serializing a transfer fee */\nexport function transferFeeLayout(property) {\n  return struct([u64('epoch'), u64('maximumFee'), u16('transferFeeBasisPoints')], property);\n}\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const TransferFeeConfigLayout = struct([publicKey('transferFeeConfigAuthority'), publicKey('withdrawWithheldAuthority'), u64('withheldAmount'), transferFeeLayout('olderTransferFee'), transferFeeLayout('newerTransferFee')]);\nexport const TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;\n/** Buffer layout for de/serializing */\nexport const TransferFeeAmountLayout = struct([u64('withheldAmount')]);\nexport const TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;\nexport function getTransferFeeConfig(mint) {\n  const extensionData = getExtensionData(ExtensionType.TransferFeeConfig, mint.tlvData);\n  if (extensionData !== null) {\n    return TransferFeeConfigLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}\nexport function getTransferFeeAmount(account) {\n  const extensionData = getExtensionData(ExtensionType.TransferFeeAmount, account.tlvData);\n  if (extensionData !== null) {\n    return TransferFeeAmountLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["struct","u16","publicKey","u64","ExtensionType","getExtensionData","MAX_FEE_BASIS_POINTS","ONE_IN_BASIS_POINTS","transferFeeLayout","property","TransferFeeConfigLayout","TRANSFER_FEE_CONFIG_SIZE","span","TransferFeeAmountLayout","TRANSFER_FEE_AMOUNT_SIZE","getTransferFeeConfig","mint","extensionData","TransferFeeConfig","tlvData","decode","getTransferFeeAmount","account","TransferFeeAmount"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\extensions\\transferFee\\state.ts"],"sourcesContent":["import type { Layout } from '@solana/buffer-layout';\nimport { struct, u16 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport type { Account } from '../../state/account.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\nexport const MAX_FEE_BASIS_POINTS = 10_000;\nexport const ONE_IN_BASIS_POINTS: bigint = MAX_FEE_BASIS_POINTS as unknown as bigint;\n\n/** TransferFeeConfig as stored by the program */\nexport interface TransferFee {\n    /** First epoch where the transfer fee takes effect */\n    epoch: bigint;\n    /** Maximum fee assessed on transfers, expressed as an amount of tokens */\n    maximumFee: bigint;\n    /**\n     * Amount of transfer collected as fees, expressed as basis points of the\n     * transfer amount, ie. increments of 0.01%\n     */\n    transferFeeBasisPoints: number;\n}\n\n/** Transfer fee extension data for mints. */\nexport interface TransferFeeConfig {\n    /** Optional authority to set the fee */\n    transferFeeConfigAuthority: PublicKey;\n    /** Withdraw from mint instructions must be signed by this key */\n    withdrawWithheldAuthority: PublicKey;\n    /** Withheld transfer fee tokens that have been moved to the mint for withdrawal */\n    withheldAmount: bigint;\n    /** Older transfer fee, used if the current epoch < newerTransferFee.epoch */\n    olderTransferFee: TransferFee;\n    /** Newer transfer fee, used if the current epoch >= newerTransferFee.epoch */\n    newerTransferFee: TransferFee;\n}\n\n/** Buffer layout for de/serializing a transfer fee */\nexport function transferFeeLayout(property?: string): Layout<TransferFee> {\n    return struct<TransferFee>([u64('epoch'), u64('maximumFee'), u16('transferFeeBasisPoints')], property);\n}\n\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const TransferFeeConfigLayout = struct<TransferFeeConfig>([\n    publicKey('transferFeeConfigAuthority'),\n    publicKey('withdrawWithheldAuthority'),\n    u64('withheldAmount'),\n    transferFeeLayout('olderTransferFee'),\n    transferFeeLayout('newerTransferFee'),\n]);\n\nexport const TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;\n\n/** Transfer fee amount data for accounts. */\nexport interface TransferFeeAmount {\n    /** Withheld transfer fee tokens that can be claimed by the fee authority */\n    withheldAmount: bigint;\n}\n/** Buffer layout for de/serializing */\nexport const TransferFeeAmountLayout = struct<TransferFeeAmount>([u64('withheldAmount')]);\nexport const TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;\n\nexport function getTransferFeeConfig(mint: Mint): TransferFeeConfig | null {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeConfig, mint.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeConfigLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n\nexport function getTransferFeeAmount(account: Account): TransferFeeAmount | null {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeAmount, account.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeAmountLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n"],"mappings":"AACA,SAASA,MAAM,EAAEC,GAAG,QAAQ,uBAAuB;AACnD,SAASC,SAAS,EAAEC,GAAG,QAAQ,6BAA6B;AAI5D,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AAErE,OAAO,MAAMC,oBAAoB,GAAG,KAAM;AAC1C,OAAO,MAAMC,mBAAmB,GAAWD,oBAAyC;AA6BpF;AACA,OAAM,SAAUE,iBAAiBA,CAACC,QAAiB;EAC/C,OAAOT,MAAM,CAAc,CAACG,GAAG,CAAC,OAAO,CAAC,EAAEA,GAAG,CAAC,YAAY,CAAC,EAAEF,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAAEQ,QAAQ,CAAC;AAC1G;AAEA;AACA,OAAO,MAAMC,uBAAuB,GAAGV,MAAM,CAAoB,CAC7DE,SAAS,CAAC,4BAA4B,CAAC,EACvCA,SAAS,CAAC,2BAA2B,CAAC,EACtCC,GAAG,CAAC,gBAAgB,CAAC,EACrBK,iBAAiB,CAAC,kBAAkB,CAAC,EACrCA,iBAAiB,CAAC,kBAAkB,CAAC,CACxC,CAAC;AAEF,OAAO,MAAMG,wBAAwB,GAAGD,uBAAuB,CAACE,IAAI;AAOpE;AACA,OAAO,MAAMC,uBAAuB,GAAGb,MAAM,CAAoB,CAACG,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACzF,OAAO,MAAMW,wBAAwB,GAAGD,uBAAuB,CAACD,IAAI;AAEpE,OAAM,SAAUG,oBAAoBA,CAACC,IAAU;EAC3C,MAAMC,aAAa,GAAGZ,gBAAgB,CAACD,aAAa,CAACc,iBAAiB,EAAEF,IAAI,CAACG,OAAO,CAAC;EACrF,IAAIF,aAAa,KAAK,IAAI,EAAE;IACxB,OAAOP,uBAAuB,CAACU,MAAM,CAACH,aAAa,CAAC;GACvD,MAAM;IACH,OAAO,IAAI;;AAEnB;AAEA,OAAM,SAAUI,oBAAoBA,CAACC,OAAgB;EACjD,MAAML,aAAa,GAAGZ,gBAAgB,CAACD,aAAa,CAACmB,iBAAiB,EAAED,OAAO,CAACH,OAAO,CAAC;EACxF,IAAIF,aAAa,KAAK,IAAI,EAAE;IACxB,OAAOJ,uBAAuB,CAACO,MAAM,CAACH,aAAa,CAAC;GACvD,MAAM;IACH,OAAO,IAAI;;AAEnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}