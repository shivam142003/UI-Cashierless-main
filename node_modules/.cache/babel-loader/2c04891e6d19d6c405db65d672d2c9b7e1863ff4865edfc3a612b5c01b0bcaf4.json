{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createRevokeInstruction } from '../instructions/revoke.js';\nimport { getSigners } from './internal.js';\n/**\n * Revoke approval for the transfer of tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the token account\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function revoke(connection, payer, account, owner) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createRevokeInstruction(account, ownerPublicKey, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createRevokeInstruction","getSigners","revoke","connection","payer","account","owner","multiSigners","arguments","length","undefined","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\revoke.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createRevokeInstruction } from '../instructions/revoke.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Revoke approval for the transfer of tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the token account\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function revoke(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createRevokeInstruction(account, ownerPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;AAaA,OAAO,eAAeC,MAAMA,CACxBC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,KAAyB,EAGG;EAAA,IAF5BC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyB,EAAE;EAAA,IAC3BG,cAA+B,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAC/BE,SAAS,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGT,gBAAgB;EAE5B,MAAM,CAACc,cAAc,EAAEC,OAAO,CAAC,GAAGb,UAAU,CAACK,KAAK,EAAEC,YAAY,CAAC;EAEjE,MAAMQ,WAAW,GAAG,IAAIjB,WAAW,EAAE,CAACkB,GAAG,CACrChB,uBAAuB,CAACK,OAAO,EAAEQ,cAAc,EAAEN,YAAY,EAAEK,SAAS,CAAC,CAC5E;EAED,OAAO,MAAMf,yBAAyB,CAACM,UAAU,EAAEY,WAAW,EAAE,CAACX,KAAK,EAAE,GAAGU,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG"},"metadata":{},"sourceType":"module","externalDependencies":[]}