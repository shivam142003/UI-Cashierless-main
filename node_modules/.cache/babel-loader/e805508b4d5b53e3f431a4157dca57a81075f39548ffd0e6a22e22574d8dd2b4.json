{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMultisigInstruction } from '../instructions/initializeMultisig.js';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/multisig.js';\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\nexport async function createMultisig(connection, payer, signers, m) {\n  let keypair = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Keypair.generate();\n  let confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: MULTISIG_SIZE,\n    lamports,\n    programId\n  }), createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeMultisigInstruction","getMinimumBalanceForRentExemptMultisig","MULTISIG_SIZE","createMultisig","connection","payer","signers","m","keypair","arguments","length","undefined","generate","confirmOptions","programId","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\createMultisig.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMultisigInstruction } from '../instructions/initializeMultisig.js';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/multisig.js';\n\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\nexport async function createMultisig(\n    connection: Connection,\n    payer: Signer,\n    signers: PublicKey[],\n    m: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MULTISIG_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"],"mappings":"AACA,SAASA,OAAO,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAChG,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,mCAAmC,QAAQ,uCAAuC;AAC3F,SAASC,sCAAsC,EAAEC,aAAa,QAAQ,sBAAsB;AAE5F;;;;;;;;;;;;;AAaA,OAAO,eAAeC,cAAcA,CAChCC,UAAsB,EACtBC,KAAa,EACbC,OAAoB,EACpBC,CAAS,EAGmB;EAAA,IAF5BC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGd,OAAO,CAACiB,QAAQ,EAAE;EAAA,IAC5BC,cAA+B,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAC/BG,SAAS,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,gBAAgB;EAE5B,MAAMgB,QAAQ,GAAG,MAAMd,sCAAsC,CAACG,UAAU,CAAC;EAEzE,MAAMY,WAAW,GAAG,IAAIlB,WAAW,EAAE,CAACmB,GAAG,CACrCpB,aAAa,CAACqB,aAAa,CAAC;IACxBC,UAAU,EAAEd,KAAK,CAACe,SAAS;IAC3BC,gBAAgB,EAAEb,OAAO,CAACY,SAAS;IACnCE,KAAK,EAAEpB,aAAa;IACpBa,QAAQ;IACRD;GACH,CAAC,EACFd,mCAAmC,CAACQ,OAAO,CAACY,SAAS,EAAEd,OAAO,EAAEC,CAAC,EAAEO,SAAS,CAAC,CAChF;EAED,MAAMlB,yBAAyB,CAACQ,UAAU,EAAEY,WAAW,EAAE,CAACX,KAAK,EAAEG,OAAO,CAAC,EAAEK,cAAc,CAAC;EAE1F,OAAOL,OAAO,CAACY,SAAS;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}