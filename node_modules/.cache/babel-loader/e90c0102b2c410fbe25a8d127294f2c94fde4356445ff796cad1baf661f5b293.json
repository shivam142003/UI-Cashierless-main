{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\nexport const initializeAccount3InstructionData = struct([u8('instruction'), publicKey('owner')]);\n/**\n * Construct an InitializeAccount3 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccount3Instruction(account, mint, owner) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(initializeAccount3InstructionData.span);\n  initializeAccount3InstructionData.encode({\n    instruction: TokenInstruction.InitializeAccount3,\n    owner\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an InitializeAccount3 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccount3Instruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeAccount3InstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint\n    },\n    data\n  } = decodeInitializeAccount3InstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeAccount3) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      mint\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeAccount3 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccount3InstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint\n    },\n    data: initializeAccount3InstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","publicKey","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeAccount3InstructionData","createInitializeAccount3Instruction","account","mint","owner","programId","arguments","length","undefined","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeAccount3","decodeInitializeAccount3Instruction","equals","decodeInitializeAccount3InstructionUnchecked","_ref","decode"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\instructions\\initializeAccount3.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\nexport interface InitializeAccount3InstructionData {\n    instruction: TokenInstruction.InitializeAccount3;\n    owner: PublicKey;\n}\n\nexport const initializeAccount3InstructionData = struct<InitializeAccount3InstructionData>([\n    u8('instruction'),\n    publicKey('owner'),\n]);\n\n/**\n * Construct an InitializeAccount3 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccount3Instruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeAccount3InstructionData.span);\n    initializeAccount3InstructionData.encode({ instruction: TokenInstruction.InitializeAccount3, owner }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeAccount3 instruction */\nexport interface DecodedInitializeAccount3Instruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeAccount3;\n        owner: PublicKey;\n    };\n}\n\n/**\n * Decode an InitializeAccount3 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccount3Instruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeAccount3Instruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccount3InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint },\n        data,\n    } = decodeInitializeAccount3InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount3) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeAccount3 instruction */\nexport interface DecodedInitializeAccount3InstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        owner: PublicKey;\n    };\n}\n\n/**\n * Decode an InitializeAccount3 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccount3InstructionUnchecked({\n    programId,\n    keys: [account, mint],\n    data,\n}: TransactionInstruction): DecodedInitializeAccount3InstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data: initializeAccount3InstructionData.decode(data),\n    };\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAO7C,OAAO,MAAMC,iCAAiC,GAAGV,MAAM,CAAoC,CACvFC,EAAE,CAAC,aAAa,CAAC,EACjBC,SAAS,CAAC,OAAO,CAAC,CACrB,CAAC;AAEF;;;;;;;;;;AAUA,OAAM,SAAUS,mCAAmCA,CAC/CC,OAAkB,EAClBC,IAAe,EACfC,KAAgB,EACY;EAAA,IAA5BC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGZ,gBAAgB;EAE5B,MAAMe,IAAI,GAAG,CACT;IAAEC,MAAM,EAAER,OAAO;IAAES,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACtD;IAAEF,MAAM,EAAEP,IAAI;IAAEQ,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CACvD;EACD,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACf,iCAAiC,CAACgB,IAAI,CAAC;EACjEhB,iCAAiC,CAACiB,MAAM,CAAC;IAAEC,WAAW,EAAEnB,gBAAgB,CAACoB,kBAAkB;IAAEf;EAAK,CAAE,EAAES,IAAI,CAAC;EAC3G,OAAO,IAAIpB,sBAAsB,CAAC;IAAEgB,IAAI;IAAEJ,SAAS;IAAEQ;EAAI,CAAE,CAAC;AAChE;AAeA;;;;;;;;AAQA,OAAM,SAAUO,mCAAmCA,CAC/CF,WAAmC,EACP;EAAA,IAA5Bb,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGZ,gBAAgB;EAE5B,IAAI,CAACwB,WAAW,CAACb,SAAS,CAACgB,MAAM,CAAChB,SAAS,CAAC,EAAE,MAAM,IAAIR,mCAAmC,EAAE;EAC7F,IAAIqB,WAAW,CAACL,IAAI,CAACN,MAAM,KAAKP,iCAAiC,CAACgB,IAAI,EAClE,MAAM,IAAIrB,gCAAgC,EAAE;EAEhD,MAAM;IACFc,IAAI,EAAE;MAAEP,OAAO;MAAEC;IAAI,CAAE;IACvBU;EAAI,CACP,GAAGS,4CAA4C,CAACJ,WAAW,CAAC;EAC7D,IAAIL,IAAI,CAACK,WAAW,KAAKnB,gBAAgB,CAACoB,kBAAkB,EAAE,MAAM,IAAIrB,gCAAgC,EAAE;EAC1G,IAAI,CAACI,OAAO,IAAI,CAACC,IAAI,EAAE,MAAM,IAAIP,gCAAgC,EAAE;EAEnE;EAEA,OAAO;IACHS,SAAS;IACTI,IAAI,EAAE;MACFP,OAAO;MACPC;KACH;IACDU;GACH;AACL;AAeA;;;;;;;AAOA,OAAM,SAAUS,4CAA4CA,CAAAC,IAAA,EAInC;EAAA,IAJoC;IACzDlB,SAAS;IACTI,IAAI,EAAE,CAACP,OAAO,EAAEC,IAAI,CAAC;IACrBU;EAAI,CACiB,GAAAU,IAAA;EACrB,OAAO;IACHlB,SAAS;IACTI,IAAI,EAAE;MACFP,OAAO;MACPC;KACH;IACDU,IAAI,EAAEb,iCAAiC,CAACwB,MAAM,CAACX,IAAI;GACtD;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}