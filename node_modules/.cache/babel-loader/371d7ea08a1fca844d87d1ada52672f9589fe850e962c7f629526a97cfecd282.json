{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct([u8('instruction'), u8('m')]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(account, signers, m) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  for (const signer of signers) {\n    keys.push({\n      pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n      isSigner: false,\n      isWritable: false\n    });\n  }\n  const data = Buffer.alloc(initializeMultisigInstructionData.span);\n  initializeMultisigInstructionData.encode({\n    instruction: TokenInstruction.InitializeMultisig,\n    m\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMultisigInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  } = decodeInitializeMultisigInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n  if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, rent, ...signers],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data: initializeMultisigInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","PublicKey","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeMultisigInstructionData","createInitializeMultisigInstruction","account","signers","m","programId","arguments","length","undefined","keys","pubkey","isSigner","isWritable","signer","push","publicKey","data","Buffer","alloc","span","encode","instruction","InitializeMultisig","decodeInitializeMultisigInstruction","equals","rent","decodeInitializeMultisigInstructionUnchecked","_ref","decode"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-finalmain\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\instructions\\initializeMultisig.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, Signer } from '@solana/web3.js';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeMultisigInstructionData {\n    instruction: TokenInstruction.InitializeMultisig;\n    m: number;\n}\n\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct<InitializeMultisigInstructionData>([\n    u8('instruction'),\n    u8('m'),\n]);\n\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(\n    account: PublicKey,\n    signers: (Signer | PublicKey)[],\n    m: number,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    for (const signer of signers) {\n        keys.push({\n            pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n            isSigner: false,\n            isWritable: false,\n        });\n    }\n\n    const data = Buffer.alloc(initializeMultisigInstructionData.span);\n    initializeMultisigInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMultisig,\n            m,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        rent: AccountMeta;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMultisig;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMultisigInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMultisigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, rent, signers },\n        data,\n    } = decodeInitializeMultisigInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n    if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked({\n    programId,\n    keys: [account, rent, ...signers],\n    data,\n}: TransactionInstruction): DecodedInitializeMultisigInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data: initializeMultisigInstructionData.decode(data),\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}