{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createHarvestWithheldTokensToMintInstruction, createTransferCheckedWithFeeInstruction, createWithdrawWithheldTokensFromAccountsInstruction, createWithdrawWithheldTokensFromMintInstruction } from './instructions.js';\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFee(connection, payer, source, mint, destination, owner, amount, decimals, fee) {\n  let multiSigners = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];\n  let confirmOptions = arguments.length > 10 ? arguments[10] : undefined;\n  let programId = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : TOKEN_2022_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createTransferCheckedWithFeeInstruction(source, mint, destination, ownerPublicKey, amount, decimals, fee, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromMint(connection, payer, mint, destination, authority) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_2022_PROGRAM_ID;\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createWithdrawWithheldTokensFromMintInstruction(mint, destination, authorityPublicKey, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromAccounts(connection, payer, mint, destination, authority, multiSigners, sources, confirmOptions) {\n  let programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : TOKEN_2022_PROGRAM_ID;\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createWithdrawWithheldTokensFromAccountsInstruction(mint, destination, authorityPublicKey, signers, sources, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function harvestWithheldTokensToMint(connection, payer, mint, sources, confirmOptions) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_2022_PROGRAM_ID;\n  const transaction = new Transaction().add(createHarvestWithheldTokensToMintInstruction(mint, sources, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createHarvestWithheldTokensToMintInstruction","createTransferCheckedWithFeeInstruction","createWithdrawWithheldTokensFromAccountsInstruction","createWithdrawWithheldTokensFromMintInstruction","transferCheckedWithFee","connection","payer","source","mint","destination","owner","amount","decimals","fee","multiSigners","arguments","length","undefined","confirmOptions","programId","ownerPublicKey","signers","transaction","add","withdrawWithheldTokensFromMint","authority","authorityPublicKey","withdrawWithheldTokensFromAccounts","sources","harvestWithheldTokensToMint"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-finalmain\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\extensions\\transferFee\\actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport {\n    createHarvestWithheldTokensToMintInstruction,\n    createTransferCheckedWithFeeInstruction,\n    createWithdrawWithheldTokensFromAccountsInstruction,\n    createWithdrawWithheldTokensFromMintInstruction,\n} from './instructions.js';\n\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFee(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: Signer | PublicKey,\n    amount: bigint,\n    decimals: number,\n    fee: bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createTransferCheckedWithFeeInstruction(\n            source,\n            mint,\n            destination,\n            ownerPublicKey,\n            amount,\n            decimals,\n            fee,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createWithdrawWithheldTokensFromMintInstruction(mint, destination, authorityPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromAccounts(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[],\n    sources: PublicKey[],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createWithdrawWithheldTokensFromAccountsInstruction(\n            mint,\n            destination,\n            authorityPublicKey,\n            signers,\n            sources,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function harvestWithheldTokensToMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    sources: PublicKey[],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createHarvestWithheldTokensToMintInstruction(mint, sources, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}