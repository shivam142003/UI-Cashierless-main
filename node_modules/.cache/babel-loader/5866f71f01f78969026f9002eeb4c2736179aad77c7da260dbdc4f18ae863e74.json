{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const approveInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveInstruction(account, delegate, owner, amount) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: delegate,\n    isSigner: false,\n    isWritable: false\n  }], owner, multiSigners);\n  const data = Buffer.alloc(approveInstructionData.span);\n  approveInstructionData.encode({\n    instruction: TokenInstruction.Approve,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== approveInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeApproveInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Approve) throw new TokenInvalidInstructionTypeError();\n  if (!account || !delegate || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, delegate, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data: approveInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","approveInstructionData","createApproveInstruction","account","delegate","owner","amount","multiSigners","arguments","length","undefined","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","Approve","BigInt","decodeApproveInstruction","equals","decodeApproveInstructionUnchecked","_ref","decode"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-finalmain\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\instructions\\approve.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface ApproveInstructionData {\n    instruction: TokenInstruction.Approve;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const approveInstructionData = struct<ApproveInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveInstruction(\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: delegate, isSigner: false, isWritable: false },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(approveInstructionData.span);\n    approveInstructionData.encode(\n        {\n            instruction: TokenInstruction.Approve,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Approve instruction */\nexport interface DecodedApproveInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        delegate: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Approve;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedApproveInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, delegate, owner, multiSigners },\n        data,\n    } = decodeApproveInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Approve) throw new TokenInvalidInstructionTypeError();\n    if (!account || !delegate || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Approve instruction */\nexport interface DecodedApproveInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        delegate: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveInstructionUnchecked({\n    programId,\n    keys: [account, delegate, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedApproveInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveInstructionData.decode(data),\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}