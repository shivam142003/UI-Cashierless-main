{"ast":null,"code":"import { u64 } from '@solana/buffer-layout-utils';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createUiAmountToAmountInstruction } from '../instructions/uiAmountToAmount.js';\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Ui Amount of tokens to be converted to Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function uiAmountToAmount(connection, payer, mint, amount) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const transaction = new Transaction().add(createUiAmountToAmountInstruction(mint, amount, programId));\n  const {\n    returnData,\n    err\n  } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n  if (returnData) {\n    const data = Buffer.from(returnData.data[0], returnData.data[1]);\n    return u64().decode(data);\n  }\n  return err;\n}","map":{"version":3,"names":["u64","Transaction","TOKEN_PROGRAM_ID","createUiAmountToAmountInstruction","uiAmountToAmount","connection","payer","mint","amount","programId","arguments","length","undefined","transaction","add","returnData","err","simulateTransaction","value","data","Buffer","from","decode"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\uiAmountToAmount.ts"],"sourcesContent":["import { u64 } from '@solana/buffer-layout-utils';\nimport type { Connection, PublicKey, Signer, TransactionError } from '@solana/web3.js';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createUiAmountToAmountInstruction } from '../instructions/uiAmountToAmount.js';\n\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Ui Amount of tokens to be converted to Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function uiAmountToAmount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    amount: string,\n    programId = TOKEN_PROGRAM_ID\n): Promise<bigint | TransactionError | null> {\n    const transaction = new Transaction().add(createUiAmountToAmountInstruction(mint, amount, programId));\n    const { returnData, err } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n    if (returnData) {\n        const data = Buffer.from(returnData.data[0], returnData.data[1]);\n        return u64().decode(data);\n    }\n    return err;\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,6BAA6B;AAEjD,SAASC,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,iCAAiC,QAAQ,qCAAqC;AAEvF;;;;;;;;;;;AAWA,OAAO,eAAeC,gBAAgBA,CAClCC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,MAAc,EACc;EAAA,IAA5BC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,gBAAgB;EAE5B,MAAMW,WAAW,GAAG,IAAIZ,WAAW,EAAE,CAACa,GAAG,CAACX,iCAAiC,CAACI,IAAI,EAAEC,MAAM,EAAEC,SAAS,CAAC,CAAC;EACrG,MAAM;IAAEM,UAAU;IAAEC;EAAG,CAAE,GAAG,CAAC,MAAMX,UAAU,CAACY,mBAAmB,CAACJ,WAAW,EAAE,CAACP,KAAK,CAAC,EAAE,KAAK,CAAC,EAAEY,KAAK;EACrG,IAAIH,UAAU,EAAE;IACZ,MAAMI,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACN,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,EAAEJ,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IAChE,OAAOnB,GAAG,EAAE,CAACsB,MAAM,CAACH,IAAI,CAAC;;EAE7B,OAAOH,GAAG;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}