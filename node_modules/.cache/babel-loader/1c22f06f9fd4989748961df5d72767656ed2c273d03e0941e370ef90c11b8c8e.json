{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createFreezeAccountInstruction } from '../instructions/freezeAccount.js';\nimport { getSigners } from './internal.js';\n/**\n * Freeze a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to freeze\n * @param mint           Mint for the account\n * @param authority      Mint freeze authority\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function freezeAccount(connection, payer, account, mint, authority) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_PROGRAM_ID;\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createFreezeAccountInstruction(account, mint, authorityPublicKey, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createFreezeAccountInstruction","getSigners","freezeAccount","connection","payer","account","mint","authority","multiSigners","arguments","length","undefined","confirmOptions","programId","authorityPublicKey","signers","transaction","add"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\freezeAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createFreezeAccountInstruction } from '../instructions/freezeAccount.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Freeze a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to freeze\n * @param mint           Mint for the account\n * @param authority      Mint freeze authority\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function freezeAccount(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    mint: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createFreezeAccountInstruction(account, mint, authorityPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,8BAA8B,QAAQ,kCAAkC;AACjF,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,aAAaA,CAC/BC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,IAAe,EACfC,SAA6B,EAGD;EAAA,IAF5BC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyB,EAAE;EAAA,IAC3BG,cAA+B,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAC/BE,SAAS,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,gBAAgB;EAE5B,MAAM,CAACe,kBAAkB,EAAEC,OAAO,CAAC,GAAGd,UAAU,CAACM,SAAS,EAAEC,YAAY,CAAC;EAEzE,MAAMQ,WAAW,GAAG,IAAIlB,WAAW,EAAE,CAACmB,GAAG,CACrCjB,8BAA8B,CAACK,OAAO,EAAEC,IAAI,EAAEQ,kBAAkB,EAAEN,YAAY,EAAEK,SAAS,CAAC,CAC7F;EAED,OAAO,MAAMhB,yBAAyB,CAACM,UAAU,EAAEa,WAAW,EAAE,CAACZ,KAAK,EAAE,GAAGW,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG"},"metadata":{},"sourceType":"module","externalDependencies":[]}