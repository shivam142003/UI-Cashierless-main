{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const approveCheckedInstructionData = struct([u8('instruction'), u64('amount'), u8('decimals')]);\n/**\n * Construct an ApproveChecked instruction\n *\n * @param account      Account to set the delegate for\n * @param mint         Mint account\n * @param delegate     Account authorized to transfer of tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param decimals     Number of decimals in approve amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveCheckedInstruction(account, mint, delegate, owner, amount, decimals) {\n  let multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: delegate,\n    isSigner: false,\n    isWritable: false\n  }], owner, multiSigners);\n  const data = Buffer.alloc(approveCheckedInstructionData.span);\n  approveCheckedInstructionData.encode({\n    instruction: TokenInstruction.ApproveChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an ApproveChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== approveCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeApproveCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.ApproveChecked) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !delegate || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode an ApproveChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveCheckedInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, delegate, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data: approveCheckedInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","approveCheckedInstructionData","createApproveCheckedInstruction","account","mint","delegate","owner","amount","decimals","multiSigners","arguments","length","undefined","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","ApproveChecked","BigInt","decodeApproveCheckedInstruction","equals","decodeApproveCheckedInstructionUnchecked","_ref","decode"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-finalmain\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\instructions\\approveChecked.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface ApproveCheckedInstructionData {\n    instruction: TokenInstruction.ApproveChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const approveCheckedInstructionData = struct<ApproveCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct an ApproveChecked instruction\n *\n * @param account      Account to set the delegate for\n * @param mint         Mint account\n * @param delegate     Account authorized to transfer of tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param decimals     Number of decimals in approve amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveCheckedInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: delegate, isSigner: false, isWritable: false },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(approveCheckedInstructionData.span);\n    approveCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.ApproveChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid ApproveChecked instruction */\nexport interface DecodedApproveCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        delegate: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.ApproveChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode an ApproveChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedApproveCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, delegate, owner, multiSigners },\n        data,\n    } = decodeApproveCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ApproveChecked) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !delegate || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated ApproveChecked instruction */\nexport interface DecodedApproveCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        delegate: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode an ApproveChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveCheckedInstructionUnchecked({\n    programId,\n    keys: [account, mint, delegate, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedApproveCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveCheckedInstructionData.decode(data),\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}