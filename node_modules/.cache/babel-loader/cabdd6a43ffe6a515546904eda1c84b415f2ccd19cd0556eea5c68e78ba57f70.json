{"ast":null,"code":"import { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAmountToUiAmountInstruction } from '../instructions/amountToUiAmount.js';\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Amount of tokens to be converted to Ui Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function amountToUiAmount(connection, payer, mint, amount) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const transaction = new Transaction().add(createAmountToUiAmountInstruction(mint, amount, programId));\n  const {\n    returnData,\n    err\n  } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n  if (returnData?.data) {\n    return Buffer.from(returnData.data[0], returnData.data[1]).toString('utf-8');\n  }\n  return err;\n}","map":{"version":3,"names":["Transaction","TOKEN_PROGRAM_ID","createAmountToUiAmountInstruction","amountToUiAmount","connection","payer","mint","amount","programId","arguments","length","undefined","transaction","add","returnData","err","simulateTransaction","value","data","Buffer","from","toString"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-finalmain\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\amountToUiAmount.ts"],"sourcesContent":["import type { Connection, PublicKey, Signer, TransactionError } from '@solana/web3.js';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAmountToUiAmountInstruction } from '../instructions/amountToUiAmount.js';\n\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Amount of tokens to be converted to Ui Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function amountToUiAmount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    amount: number | bigint,\n    programId = TOKEN_PROGRAM_ID\n): Promise<string | TransactionError | null> {\n    const transaction = new Transaction().add(createAmountToUiAmountInstruction(mint, amount, programId));\n    const { returnData, err } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n    if (returnData?.data) {\n        return Buffer.from(returnData.data[0], returnData.data[1]).toString('utf-8');\n    }\n    return err;\n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,iCAAiC,QAAQ,qCAAqC;AAEvF;;;;;;;;;;;AAWA,OAAO,eAAeC,gBAAgBA,CAClCC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,MAAuB,EACK;EAAA,IAA5BC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,gBAAgB;EAE5B,MAAMW,WAAW,GAAG,IAAIZ,WAAW,EAAE,CAACa,GAAG,CAACX,iCAAiC,CAACI,IAAI,EAAEC,MAAM,EAAEC,SAAS,CAAC,CAAC;EACrG,MAAM;IAAEM,UAAU;IAAEC;EAAG,CAAE,GAAG,CAAC,MAAMX,UAAU,CAACY,mBAAmB,CAACJ,WAAW,EAAE,CAACP,KAAK,CAAC,EAAE,KAAK,CAAC,EAAEY,KAAK;EACrG,IAAIH,UAAU,EAAEI,IAAI,EAAE;IAClB,OAAOC,MAAM,CAACC,IAAI,CAACN,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,EAAEJ,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,CAACG,QAAQ,CAAC,OAAO,CAAC;;EAEhF,OAAON,GAAG;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}