{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createBurnInstruction } from '../instructions/burn.js';\nimport { getSigners } from './internal.js';\n/**\n * Burn tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to burn tokens from\n * @param mint           Mint for the account\n * @param owner          Account owner\n * @param amount         Amount to burn\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function burn(connection, payer, account, mint, owner, amount) {\n  let multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  let confirmOptions = arguments.length > 7 ? arguments[7] : undefined;\n  let programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : TOKEN_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createBurnInstruction(account, mint, ownerPublicKey, amount, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createBurnInstruction","getSigners","burn","connection","payer","account","mint","owner","amount","multiSigners","arguments","length","undefined","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\burn.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createBurnInstruction } from '../instructions/burn.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Burn tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to burn tokens from\n * @param mint           Mint for the account\n * @param owner          Account owner\n * @param amount         Amount to burn\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function burn(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    mint: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createBurnInstruction(account, mint, ownerPublicKey, amount, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;;AAeA,OAAO,eAAeC,IAAIA,CACtBC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,IAAe,EACfC,KAAyB,EACzBC,MAAuB,EAGK;EAAA,IAF5BC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyB,EAAE;EAAA,IAC3BG,cAA+B,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAC/BE,SAAS,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGX,gBAAgB;EAE5B,MAAM,CAACgB,cAAc,EAAEC,OAAO,CAAC,GAAGf,UAAU,CAACM,KAAK,EAAEE,YAAY,CAAC;EAEjE,MAAMQ,WAAW,GAAG,IAAInB,WAAW,EAAE,CAACoB,GAAG,CACrClB,qBAAqB,CAACK,OAAO,EAAEC,IAAI,EAAES,cAAc,EAAEP,MAAM,EAAEC,YAAY,EAAEK,SAAS,CAAC,CACxF;EAED,OAAO,MAAMjB,yBAAyB,CAACM,UAAU,EAAEc,WAAW,EAAE,CAACb,KAAK,EAAE,GAAGY,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG"},"metadata":{},"sourceType":"module","externalDependencies":[]}