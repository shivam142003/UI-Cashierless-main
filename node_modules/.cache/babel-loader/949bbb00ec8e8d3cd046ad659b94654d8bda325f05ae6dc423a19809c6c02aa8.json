{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ASSOCIATED_TOKEN_PROGRAM_ID;\n  const associatedToken = getAssociatedTokenAddressSync(mint, owner, false, programId, associatedTokenProgramId);\n  const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n  await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n  return associatedToken;\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","getAssociatedTokenAddressSync","createAssociatedTokenAccount","connection","payer","mint","owner","confirmOptions","programId","arguments","length","undefined","associatedTokenProgramId","associatedToken","transaction","add","publicKey"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\createAssociatedTokenAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function createAssociatedTokenAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const associatedToken = getAssociatedTokenAddressSync(mint, owner, false, programId, associatedTokenProgramId);\n\n    const transaction = new Transaction().add(\n        createAssociatedTokenAccountInstruction(\n            payer.publicKey,\n            associatedToken,\n            owner,\n            mint,\n            programId,\n            associatedTokenProgramId\n        )\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n    return associatedToken;\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,2BAA2B,EAAEC,gBAAgB,QAAQ,iBAAiB;AAC/E,SAASC,uCAAuC,QAAQ,2CAA2C;AACnG,SAASC,6BAA6B,QAAQ,kBAAkB;AAEhE;;;;;;;;;;;;;AAaA,OAAO,eAAeC,4BAA4BA,CAC9CC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAgB,EAChBC,cAA+B,EAEuB;EAAA,IADtDC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,gBAAgB;EAAA,IAC5Ba,wBAAwB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGX,2BAA2B;EAEtD,MAAMe,eAAe,GAAGZ,6BAA6B,CAACI,IAAI,EAAEC,KAAK,EAAE,KAAK,EAAEE,SAAS,EAAEI,wBAAwB,CAAC;EAE9G,MAAME,WAAW,GAAG,IAAIjB,WAAW,EAAE,CAACkB,GAAG,CACrCf,uCAAuC,CACnCI,KAAK,CAACY,SAAS,EACfH,eAAe,EACfP,KAAK,EACLD,IAAI,EACJG,SAAS,EACTI,wBAAwB,CAC3B,CACJ;EAED,MAAMhB,yBAAyB,CAACO,UAAU,EAAEW,WAAW,EAAE,CAACV,KAAK,CAAC,EAAEG,cAAc,CAAC;EAEjF,OAAOM,eAAe;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}