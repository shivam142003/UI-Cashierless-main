{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMintInstructionData = struct([u8('instruction'), u8('decimals'), publicKey('mintAuthority'), u8('freezeAuthorityOption'), publicKey('freezeAuthority')]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(initializeMintInstructionData.span);\n  initializeMintInstructionData.encode({\n    instruction: TokenInstruction.InitializeMint,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption: freezeAuthority ? 1 : 0,\n    freezeAuthority: freezeAuthority || new PublicKey(0)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      rent\n    },\n    data\n  } = decodeInitializeMintInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n  if (!mint || !rent) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint, rent],\n    data\n  } = _ref;\n  const {\n    instruction,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption,\n    freezeAuthority\n  } = initializeMintInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data: {\n      instruction,\n      decimals,\n      mintAuthority,\n      freezeAuthority: freezeAuthorityOption ? freezeAuthority : null\n    }\n  };\n}","map":{"version":3,"names":["struct","u8","publicKey","PublicKey","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeMintInstructionData","createInitializeMintInstruction","mint","decimals","mintAuthority","freezeAuthority","programId","arguments","length","undefined","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeMint","freezeAuthorityOption","decodeInitializeMintInstruction","equals","rent","decodeInitializeMintInstructionUnchecked","_ref","decode"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-finalmain\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\instructions\\initializeMint.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta } from '@solana/web3.js';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeMintInstructionData {\n    instruction: TokenInstruction.InitializeMint;\n    decimals: number;\n    mintAuthority: PublicKey;\n    freezeAuthorityOption: 1 | 0;\n    freezeAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const initializeMintInstructionData = struct<InitializeMintInstructionData>([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    u8('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(\n    mint: PublicKey,\n    decimals: number,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(initializeMintInstructionData.span);\n    initializeMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMint,\n            decimals,\n            mintAuthority,\n            freezeAuthorityOption: freezeAuthority ? 1 : 0,\n            freezeAuthority: freezeAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMint instruction */\nexport interface DecodedInitializeMintInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMint;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMintInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, rent },\n        data,\n    } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMint instruction */\nexport interface DecodedInitializeMintInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked({\n    programId,\n    keys: [mint, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeMintInstructionUnchecked {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } =\n        initializeMintInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}