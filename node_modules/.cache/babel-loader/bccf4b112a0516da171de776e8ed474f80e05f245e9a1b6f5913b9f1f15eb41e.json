{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMint2Instruction } from '../instructions/initializeMint2.js';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/mint.js';\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nexport async function createMint(connection, payer, mintAuthority, freezeAuthority, decimals) {\n  let keypair = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Keypair.generate();\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_PROGRAM_ID;\n  const lamports = await getMinimumBalanceForRentExemptMint(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: MINT_SIZE,\n    lamports,\n    programId\n  }), createInitializeMint2Instruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeMint2Instruction","getMinimumBalanceForRentExemptMint","MINT_SIZE","createMint","connection","payer","mintAuthority","freezeAuthority","decimals","keypair","arguments","length","undefined","generate","confirmOptions","programId","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\createMint.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMint2Instruction } from '../instructions/initializeMint2.js';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/mint.js';\n\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nexport async function createMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMint(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MINT_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMint2Instruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"],"mappings":"AACA,SAASA,OAAO,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAChG,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,gCAAgC,QAAQ,oCAAoC;AACrF,SAASC,kCAAkC,EAAEC,SAAS,QAAQ,kBAAkB;AAEhF;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,UAAUA,CAC5BC,UAAsB,EACtBC,KAAa,EACbC,aAAwB,EACxBC,eAAiC,EACjCC,QAAgB,EAGY;EAAA,IAF5BC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGf,OAAO,CAACkB,QAAQ,EAAE;EAAA,IAC5BC,cAA+B,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAC/BG,SAAS,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGX,gBAAgB;EAE5B,MAAMiB,QAAQ,GAAG,MAAMf,kCAAkC,CAACG,UAAU,CAAC;EAErE,MAAMa,WAAW,GAAG,IAAInB,WAAW,EAAE,CAACoB,GAAG,CACrCrB,aAAa,CAACsB,aAAa,CAAC;IACxBC,UAAU,EAAEf,KAAK,CAACgB,SAAS;IAC3BC,gBAAgB,EAAEb,OAAO,CAACY,SAAS;IACnCE,KAAK,EAAErB,SAAS;IAChBc,QAAQ;IACRD;GACH,CAAC,EACFf,gCAAgC,CAACS,OAAO,CAACY,SAAS,EAAEb,QAAQ,EAAEF,aAAa,EAAEC,eAAe,EAAEQ,SAAS,CAAC,CAC3G;EAED,MAAMnB,yBAAyB,CAACQ,UAAU,EAAEa,WAAW,EAAE,CAACZ,KAAK,EAAEI,OAAO,CAAC,EAAEK,cAAc,CAAC;EAE1F,OAAOL,OAAO,CAACY,SAAS;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}