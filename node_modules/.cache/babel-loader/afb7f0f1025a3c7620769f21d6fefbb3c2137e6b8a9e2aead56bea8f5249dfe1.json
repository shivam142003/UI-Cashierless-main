{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeDefaultAccountStateInstruction, createUpdateDefaultAccountStateInstruction } from './instructions.js';\n/**\n * Initialize a default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to initialize with extension\n * @param state        Account state with which to initialize new accounts\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function initializeDefaultAccountState(connection, payer, mint, state, confirmOptions) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_2022_PROGRAM_ID;\n  const transaction = new Transaction().add(createInitializeDefaultAccountStateInstruction(mint, state, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n/**\n * Update the default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to modify\n * @param state        New account state to set on created accounts\n * @param freezeAuthority          Freeze authority of the mint\n * @param multiSigners   Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateDefaultAccountState(connection, payer, mint, state, freezeAuthority) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_2022_PROGRAM_ID;\n  const [freezeAuthorityPublicKey, signers] = getSigners(freezeAuthority, multiSigners);\n  const transaction = new Transaction().add(createUpdateDefaultAccountStateInstruction(mint, state, freezeAuthorityPublicKey, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createInitializeDefaultAccountStateInstruction","createUpdateDefaultAccountStateInstruction","initializeDefaultAccountState","connection","payer","mint","state","confirmOptions","programId","arguments","length","undefined","transaction","add","updateDefaultAccountState","freezeAuthority","multiSigners","freezeAuthorityPublicKey","signers"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\extensions\\defaultAccountState\\actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport type { AccountState } from '../../state/account.js';\nimport {\n    createInitializeDefaultAccountStateInstruction,\n    createUpdateDefaultAccountStateInstruction,\n} from './instructions.js';\n\n/**\n * Initialize a default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to initialize with extension\n * @param state        Account state with which to initialize new accounts\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function initializeDefaultAccountState(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    state: AccountState,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createInitializeDefaultAccountStateInstruction(mint, state, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n\n/**\n * Update the default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to modify\n * @param state        New account state to set on created accounts\n * @param freezeAuthority          Freeze authority of the mint\n * @param multiSigners   Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateDefaultAccountState(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    state: AccountState,\n    freezeAuthority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [freezeAuthorityPublicKey, signers] = getSigners(freezeAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createUpdateDefaultAccountStateInstruction(mint, state, freezeAuthorityPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,qBAAqB,QAAQ,oBAAoB;AAE1D,SACIC,8CAA8C,EAC9CC,0CAA0C,QACvC,mBAAmB;AAE1B;;;;;;;;;;;;AAYA,OAAO,eAAeC,6BAA6BA,CAC/CC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAmB,EACnBC,cAA+B,EACE;EAAA,IAAjCC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,qBAAqB;EAEjC,MAAMa,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAACb,8CAA8C,CAACK,IAAI,EAAEC,KAAK,EAAEE,SAAS,CAAC,CAAC;EAEjH,OAAO,MAAMZ,yBAAyB,CAACO,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,CAAC,EAAEG,cAAc,CAAC;AAC5F;AAEA;;;;;;;;;;;;;;AAcA,OAAO,eAAeO,yBAAyBA,CAC3CX,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAmB,EACnBS,eAAmC,EAGF;EAAA,IAFjCC,YAAA,GAAAP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyB,EAAE;EAAA,IAC3BF,cAA+B,GAAAE,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAC/BH,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,qBAAqB;EAEjC,MAAM,CAACkB,wBAAwB,EAAEC,OAAO,CAAC,GAAGpB,UAAU,CAACiB,eAAe,EAAEC,YAAY,CAAC;EAErF,MAAMJ,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CACrCZ,0CAA0C,CAACI,IAAI,EAAEC,KAAK,EAAEW,wBAAwB,EAAEC,OAAO,EAAEV,SAAS,CAAC,CACxG;EAED,OAAO,MAAMZ,yBAAyB,CAACO,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,EAAE,GAAGc,OAAO,CAAC,EAAEX,cAAc,CAAC;AACxG"},"metadata":{},"sourceType":"module","externalDependencies":[]}