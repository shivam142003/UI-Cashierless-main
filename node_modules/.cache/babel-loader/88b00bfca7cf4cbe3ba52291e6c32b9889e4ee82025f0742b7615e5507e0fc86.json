{"ast":null,"code":"import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/account.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\nimport { createAccount } from './createAccount.js';\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions) {\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  let nativeMint = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : NATIVE_MINT;\n  // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n  if (!amount) return await createAccount(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n  // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n  if (!keypair) {\n    const associatedToken = getAssociatedTokenAddressSync(nativeMint, owner, false, programId, ASSOCIATED_TOKEN_PROGRAM_ID);\n    const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, nativeMint, programId, ASSOCIATED_TOKEN_PROGRAM_ID), SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: associatedToken,\n      lamports: amount\n    }), createSyncNativeInstruction(associatedToken, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n    return associatedToken;\n  }\n  // Otherwise, create the account with the provided keypair and return its public key\n  const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: ACCOUNT_SIZE,\n    lamports,\n    programId\n  }), SystemProgram.transfer({\n    fromPubkey: payer.publicKey,\n    toPubkey: keypair.publicKey,\n    lamports: amount\n  }), createInitializeAccountInstruction(keypair.publicKey, nativeMint, owner, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"names":["sendAndConfirmTransaction","SystemProgram","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","NATIVE_MINT","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","createInitializeAccountInstruction","createSyncNativeInstruction","ACCOUNT_SIZE","getMinimumBalanceForRentExemptAccount","getAssociatedTokenAddressSync","createAccount","createWrappedNativeAccount","connection","payer","owner","amount","keypair","confirmOptions","programId","arguments","length","undefined","nativeMint","associatedToken","transaction","add","publicKey","transfer","fromPubkey","toPubkey","lamports","newAccountPubkey","space"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-main\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\actions\\createWrappedNativeAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Keypair, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/account.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\nimport { createAccount } from './createAccount.js';\n\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(\n    connection: Connection,\n    payer: Signer,\n    owner: PublicKey,\n    amount: number,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    nativeMint = NATIVE_MINT\n): Promise<PublicKey> {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount) return await createAccount(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n\n    // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n    if (!keypair) {\n        const associatedToken = getAssociatedTokenAddressSync(\n            nativeMint,\n            owner,\n            false,\n            programId,\n            ASSOCIATED_TOKEN_PROGRAM_ID\n        );\n\n        const transaction = new Transaction().add(\n            createAssociatedTokenAccountInstruction(\n                payer.publicKey,\n                associatedToken,\n                owner,\n                nativeMint,\n                programId,\n                ASSOCIATED_TOKEN_PROGRAM_ID\n            ),\n            SystemProgram.transfer({\n                fromPubkey: payer.publicKey,\n                toPubkey: associatedToken,\n                lamports: amount,\n            }),\n            createSyncNativeInstruction(associatedToken, programId)\n        );\n\n        await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n        return associatedToken;\n    }\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }),\n        SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: keypair.publicKey,\n            lamports: amount,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, nativeMint, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AACvF,SAASC,2BAA2B,EAAEC,WAAW,EAAEC,gBAAgB,QAAQ,iBAAiB;AAC5F,SAASC,uCAAuC,QAAQ,2CAA2C;AACnG,SAASC,kCAAkC,QAAQ,sCAAsC;AACzF,SAASC,2BAA2B,QAAQ,+BAA+B;AAC3E,SAASC,YAAY,EAAEC,qCAAqC,QAAQ,qBAAqB;AACzF,SAASC,6BAA6B,QAAQ,kBAAkB;AAChE,SAASC,aAAa,QAAQ,oBAAoB;AAElD;;;;;;;;;;;;;AAaA,OAAO,eAAeC,0BAA0BA,CAC5CC,UAAsB,EACtBC,KAAa,EACbC,KAAgB,EAChBC,MAAc,EACdC,OAAiB,EACjBC,cAA+B,EAEP;EAAA,IADxBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGhB,gBAAgB;EAAA,IAC5BmB,UAAU,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGjB,WAAW;EAExB;EACA,IAAI,CAACa,MAAM,EAAE,OAAO,MAAML,aAAa,CAACE,UAAU,EAAEC,KAAK,EAAES,UAAU,EAAER,KAAK,EAAEE,OAAO,EAAEC,cAAc,EAAEC,SAAS,CAAC;EAEjH;EACA,IAAI,CAACF,OAAO,EAAE;IACV,MAAMO,eAAe,GAAGd,6BAA6B,CACjDa,UAAU,EACVR,KAAK,EACL,KAAK,EACLI,SAAS,EACTjB,2BAA2B,CAC9B;IAED,MAAMuB,WAAW,GAAG,IAAIxB,WAAW,EAAE,CAACyB,GAAG,CACrCrB,uCAAuC,CACnCS,KAAK,CAACa,SAAS,EACfH,eAAe,EACfT,KAAK,EACLQ,UAAU,EACVJ,SAAS,EACTjB,2BAA2B,CAC9B,EACDF,aAAa,CAAC4B,QAAQ,CAAC;MACnBC,UAAU,EAAEf,KAAK,CAACa,SAAS;MAC3BG,QAAQ,EAAEN,eAAe;MACzBO,QAAQ,EAAEf;KACb,CAAC,EACFT,2BAA2B,CAACiB,eAAe,EAAEL,SAAS,CAAC,CAC1D;IAED,MAAMpB,yBAAyB,CAACc,UAAU,EAAEY,WAAW,EAAE,CAACX,KAAK,CAAC,EAAEI,cAAc,CAAC;IAEjF,OAAOM,eAAe;;EAG1B;EACA,MAAMO,QAAQ,GAAG,MAAMtB,qCAAqC,CAACI,UAAU,CAAC;EAExE,MAAMY,WAAW,GAAG,IAAIxB,WAAW,EAAE,CAACyB,GAAG,CACrC1B,aAAa,CAACW,aAAa,CAAC;IACxBkB,UAAU,EAAEf,KAAK,CAACa,SAAS;IAC3BK,gBAAgB,EAAEf,OAAO,CAACU,SAAS;IACnCM,KAAK,EAAEzB,YAAY;IACnBuB,QAAQ;IACRZ;GACH,CAAC,EACFnB,aAAa,CAAC4B,QAAQ,CAAC;IACnBC,UAAU,EAAEf,KAAK,CAACa,SAAS;IAC3BG,QAAQ,EAAEb,OAAO,CAACU,SAAS;IAC3BI,QAAQ,EAAEf;GACb,CAAC,EACFV,kCAAkC,CAACW,OAAO,CAACU,SAAS,EAAEJ,UAAU,EAAER,KAAK,EAAEI,SAAS,CAAC,CACtF;EAED,MAAMpB,yBAAyB,CAACc,UAAU,EAAEY,WAAW,EAAE,CAACX,KAAK,EAAEG,OAAO,CAAC,EAAEC,cAAc,CAAC;EAE1F,OAAOD,OAAO,CAACU,SAAS;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}