{"ast":null,"code":"import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Token account state as stored by the program */\nexport var AccountState;\n(function (AccountState) {\n  AccountState[AccountState[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  AccountState[AccountState[\"Initialized\"] = 1] = \"Initialized\";\n  AccountState[AccountState[\"Frozen\"] = 2] = \"Frozen\";\n})(AccountState || (AccountState = {}));\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct([publicKey('mint'), publicKey('owner'), u64('amount'), u32('delegateOption'), publicKey('delegate'), u8('state'), u32('isNativeOption'), u64('isNative'), u64('delegatedAmount'), u32('closeAuthorityOption'), publicKey('closeAuthority')]);\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(connection, address, commitment) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  const info = await connection.getAccountInfo(address, commitment);\n  return unpackAccount(address, info, programId);\n}\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(connection, addresses, commitment) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n  return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(connection, commitment) {\n  return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(connection, extensions, commitment) {\n  const accountLen = getAccountLen(extensions);\n  return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(address, info) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TOKEN_PROGRAM_ID;\n  if (!info) throw new TokenAccountNotFoundError();\n  if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n  if (info.data.length < ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n  const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n  let tlvData = Buffer.alloc(0);\n  if (info.data.length > ACCOUNT_SIZE) {\n    if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n    if (info.data[ACCOUNT_SIZE] != AccountType.Account) throw new TokenInvalidAccountError();\n    tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n  }\n  return {\n    address,\n    mint: rawAccount.mint,\n    owner: rawAccount.owner,\n    amount: rawAccount.amount,\n    delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n    delegatedAmount: rawAccount.delegatedAmount,\n    isInitialized: rawAccount.state !== AccountState.Uninitialized,\n    isFrozen: rawAccount.state === AccountState.Frozen,\n    isNative: !!rawAccount.isNativeOption,\n    rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n    closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n    tlvData\n  };\n}","map":{"version":3,"names":["struct","u32","u8","publicKey","u64","TOKEN_PROGRAM_ID","TokenAccountNotFoundError","TokenInvalidAccountError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","ACCOUNT_TYPE_SIZE","AccountType","getAccountLen","MULTISIG_SIZE","AccountState","AccountLayout","ACCOUNT_SIZE","span","getAccount","connection","address","commitment","programId","arguments","length","undefined","info","getAccountInfo","unpackAccount","getMultipleAccounts","addresses","infos","getMultipleAccountsInfo","map","i","getMinimumBalanceForRentExemptAccount","getMinimumBalanceForRentExemptAccountWithExtensions","extensions","accountLen","getMinimumBalanceForRentExemption","owner","equals","data","rawAccount","decode","slice","tlvData","Buffer","alloc","Account","mint","amount","delegate","delegateOption","delegatedAmount","isInitialized","state","Uninitialized","isFrozen","Frozen","isNative","isNativeOption","rentExemptReserve","closeAuthority","closeAuthorityOption"],"sources":["C:\\Users\\Shivam\\OneDrive\\Desktop\\UI-Cashierless-finalmain\\UI-Cashierless-main\\node_modules\\@solana\\spl-token\\src\\state\\account.ts"],"sourcesContent":["import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a token account */\nexport interface Account {\n    /** Address of the account */\n    address: PublicKey;\n    /** Mint associated with the account */\n    mint: PublicKey;\n    /** Owner of the account */\n    owner: PublicKey;\n    /** Number of tokens the account holds */\n    amount: bigint;\n    /** Authority that can transfer tokens from the account */\n    delegate: PublicKey | null;\n    /** Number of tokens the delegate is authorized to transfer */\n    delegatedAmount: bigint;\n    /** True if the account is initialized */\n    isInitialized: boolean;\n    /** True if the account is frozen */\n    isFrozen: boolean;\n    /** True if the account is a native token account */\n    isNative: boolean;\n    /**\n     * If the account is a native token account, it must be rent-exempt. The rent-exempt reserve is the amount that must\n     * remain in the balance until the account is closed.\n     */\n    rentExemptReserve: bigint | null;\n    /** Optional authority to close the account */\n    closeAuthority: PublicKey | null;\n    tlvData: Buffer;\n}\n\n/** Token account state as stored by the program */\nexport enum AccountState {\n    Uninitialized = 0,\n    Initialized = 1,\n    Frozen = 2,\n}\n\n/** Token account as stored by the program */\nexport interface RawAccount {\n    mint: PublicKey;\n    owner: PublicKey;\n    amount: bigint;\n    delegateOption: 1 | 0;\n    delegate: PublicKey;\n    state: AccountState;\n    isNativeOption: 1 | 0;\n    isNative: bigint;\n    delegatedAmount: bigint;\n    closeAuthorityOption: 1 | 0;\n    closeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct<RawAccount>([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n}\n\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(\n    connection: Connection,\n    addresses: PublicKey[],\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account[]> {\n    const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment\n): Promise<number> {\n    const accountLen = getAccountLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID\n): Account {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > ACCOUNT_SIZE) {\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Account) throw new TokenInvalidAccountError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}